// EasyCraft - Prisma Schema
// Database: PostgreSQL 15+

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// AUTHENTICATION & USERS
// =====================================================

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  passwordHash  String      @map("password_hash")
  isActive      Boolean     @default(true) @map("is_active")
  isVerified    Boolean     @default(false) @map("is_verified")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  lastLoginAt   DateTime?   @map("last_login_at")
  
  characters    Character[]

  @@map("users")
  @@index([email])
}

// =====================================================
// CHARACTERS
// =====================================================

model Character {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  name          String    @unique
  level         Int       @default(1)
  xp            BigInt    @default(0)
  gold          BigInt    @default(100)
  hp            Int       @default(50)
  maxHp         Int       @default(50) @map("max_hp")
  
  // Appearance
  headVariant   String    @map("head_variant")
  armsVariant   String    @map("arms_variant")
  legsVariant   String    @map("legs_variant")
  feetVariant   String    @map("feet_variant")
  
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastActiveAt  DateTime  @default(now()) @map("last_active_at")
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stats         CharacterStats?
  inventory     Inventory[]
  equipment     Equipment[]
  battles       Battle[]
  quests        CharacterQuest[]
  sellListings  MarketplaceListing[] @relation("SellerListings")
  buyListings   MarketplaceListing[] @relation("BuyerListings")
  salesTransactions   MarketplaceTransaction[] @relation("SellerTransactions")
  purchaseTransactions MarketplaceTransaction[] @relation("BuyerTransactions")
  dungeonRuns   DungeonRun[]
  farmSessions  FarmSession[]
  
  @@map("characters")
  @@index([userId])
  @@index([name])
}

model CharacterStats {
  characterId   Int       @id @map("character_id")
  
  // Base stats
  str           Int       @default(5)
  agi           Int       @default(5)
  vit           Int       @default(5)
  int           Int       @default(5)
  def           Int       @default(2)
  
  // Total stats (base + equipment)
  totalStr      Int       @default(5) @map("total_str")
  totalAgi      Int       @default(5) @map("total_agi")
  totalVit      Int       @default(5) @map("total_vit")
  totalInt      Int       @default(5) @map("total_int")
  totalDef      Int       @default(2) @map("total_def")
  
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  character     Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  
  @@map("character_stats")
}

// =====================================================
// ITEMS
// =====================================================

enum ItemType {
  weapon
  armor
  material
  consumable
}

enum EquipmentSlot {
  weapon
  head
  torso
  legs
  feet
}

model Item {
  id            Int           @id @default(autoincrement())
  code          String        @unique
  name          String
  description   String?
  type          ItemType
  slot          EquipmentSlot?
  baseValue     Int           @default(0) @map("base_value")
  maxStack      Int           @default(1) @map("max_stack")
  attributes    Json          @default("{}")
  imagePath     String?       @map("image_path")
  isTradeable   Boolean       @default(true) @map("is_tradeable")
  isCraftable   Boolean       @default(false) @map("is_craftable")
  createdAt     DateTime      @default(now()) @map("created_at")
  
  inventory     Inventory[]
  marketplaceListings MarketplaceListing[]
  transactions  MarketplaceTransaction[]
  
  @@map("items")
  @@index([code])
  @@index([type])
}

// =====================================================
// INVENTORY & EQUIPMENT
// =====================================================

model Inventory {
  id            Int       @id @default(autoincrement())
  characterId   Int       @map("character_id")
  itemId        Int       @map("item_id")
  quantity      Int       @default(1)
  acquiredAt    DateTime  @default(now()) @map("acquired_at")
  
  character     Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  item          Item      @relation(fields: [itemId], references: [id])
  equipment     Equipment?
  
  @@unique([characterId, itemId])
  @@map("inventory")
  @@index([characterId])
}

model Equipment {
  characterId   Int           @map("character_id")
  slot          EquipmentSlot
  inventoryId   Int?          @unique @map("inventory_id")
  equippedAt    DateTime      @default(now()) @map("equipped_at")
  
  character     Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  inventory     Inventory?    @relation(fields: [inventoryId], references: [id])
  
  @@id([characterId, slot])
  @@map("equipment")
}

// =====================================================
// BATTLES
// =====================================================

enum BattleResult {
  victory
  defeat
  flee
}

model Battle {
  id            Int           @id @default(autoincrement())
  characterId   Int           @map("character_id")
  enemyCode     String        @map("enemy_code")
  enemyName     String?       @map("enemy_name")
  enemyLevel    Int?          @map("enemy_level")
  result        BattleResult
  turnsCount    Int           @default(0) @map("turns_count")
  battleLog     Json?         @map("battle_log")
  xpGained      Int           @default(0) @map("xp_gained")
  goldGained    Int           @default(0) @map("gold_gained")
  startedAt     DateTime      @default(now()) @map("started_at")
  endedAt       DateTime      @default(now()) @map("ended_at")
  durationMs    Int?          @map("duration_ms")
  
  character     Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  
  @@map("battles")
  @@index([characterId])
  @@index([startedAt])
}

// =====================================================
// COMBAT & ENEMIES
// =====================================================

model Enemy {
  id            Int             @id @default(autoincrement())
  code          String          @unique
  name          String
  description   String?
  level         Int
  hp            Int
  str           Int
  agi           Int
  def           Int
  xpReward      Int             @map("xp_reward")
  goldReward    Int             @map("gold_reward")
  dropTable     Json            @default("{}") @map("drop_table")
  createdAt     DateTime        @default(now()) @map("created_at")
  
  dungeonFloors DungeonFloor[]
  
  @@map("enemies")
  @@index([level])
}

// =====================================================
// QUESTS
// =====================================================

enum QuestType {
  kill_enemies
  collect_items
  reach_level
  equip_items
  earn_gold
  complete_battles
}

enum QuestRarity {
  common
  rare
  epic
  legendary
}

model Quest {
  id              Int               @id @default(autoincrement())
  code            String            @unique
  name            String
  description     String
  type            QuestType
  rarity          QuestRarity       @default(common)
  targetAmount    Int               @map("target_amount")
  targetData      Json?             @map("target_data")
  xpReward        Int               @map("xp_reward")
  goldReward      Int               @map("gold_reward")
  itemRewards     Json?             @map("item_rewards")
  isRepeatable    Boolean           @default(false) @map("is_repeatable")
  cooldownHours   Int?              @map("cooldown_hours")
  requiredLevel   Int               @default(1) @map("required_level")
  createdAt       DateTime          @default(now()) @map("created_at")
  
  characterQuests CharacterQuest[]
  
  @@map("quests")
  @@index([type])
  @@index([rarity])
}

model CharacterQuest {
  id            Int       @id @default(autoincrement())
  characterId   Int       @map("character_id")
  questId       Int       @map("quest_id")
  progress      Int       @default(0)
  completed     Boolean   @default(false)
  claimed       Boolean   @default(false)
  startedAt     DateTime  @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")
  claimedAt     DateTime? @map("claimed_at")
  
  character     Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  quest         Quest     @relation(fields: [questId], references: [id])
  
  @@unique([characterId, questId])
  @@map("character_quests")
  @@index([characterId])
  @@index([completed])
}

// =====================================================
// CRAFTING SYSTEM
// =====================================================

enum CraftingCategory {
  weapon
  armor
  consumable
  material
  enhancement
}

model CraftingRecipe {
  id              Int               @id @default(autoincrement())
  code            String            @unique
  name            String
  description     String?
  category        CraftingCategory
  resultItemCode  String            @map("result_item_code")
  resultQuantity  Int               @default(1) @map("result_quantity")
  ingredients     Json              // [{ itemCode: string, quantity: number }]
  requiredLevel   Int               @default(1) @map("required_level")
  craftTime       Int               @default(0) @map("craft_time") // seconds
  goldCost        Int               @default(0) @map("gold_cost")
  xpReward        Int               @default(0) @map("xp_reward")
  successRate     Float             @default(1.0) @map("success_rate") // 0.0 to 1.0
  createdAt       DateTime          @default(now()) @map("created_at")
  
  @@map("crafting_recipes")
  @@index([category])
  @@index([requiredLevel])
}

// =====================================================
// GAME CONFIGURATION
// =====================================================

model GameConfig {
  key           String    @id
  value         Json
  description   String?
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  @@map("game_config")
}

// =====================================================
// MARKETPLACE
// =====================================================

enum MarketplaceStatus {
  active
  sold
  cancelled
  expired
}

model MarketplaceListing {
  id              Int                 @id @default(autoincrement())
  sellerId        Int                 @map("seller_id")
  itemId          Int                 @map("item_id")
  quantity        Int                 @default(1)
  pricePerUnit    Int                 @map("price_per_unit")
  totalPrice      Int                 @map("total_price")
  commission      Int                 @default(0)
  status          MarketplaceStatus   @default(active)
  buyerId         Int?                @map("buyer_id")
  createdAt       DateTime            @default(now()) @map("created_at")
  soldAt          DateTime?           @map("sold_at")
  expiresAt       DateTime            @map("expires_at")
  
  seller          Character           @relation("SellerListings", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer           Character?          @relation("BuyerListings", fields: [buyerId], references: [id])
  item            Item                @relation(fields: [itemId], references: [id])
  transactions    MarketplaceTransaction[]
  
  @@map("marketplace_listings")
  @@index([sellerId])
  @@index([itemId])
  @@index([status])
  @@index([pricePerUnit])
  @@index([createdAt])
}

// Marketplace Transactions (Buy/Sell History)
model MarketplaceTransaction {
  id           Int      @id @default(autoincrement())
  listingId    Int      @map("listing_id")
  sellerId     Int      @map("seller_id")
  buyerId      Int      @map("buyer_id")
  itemId       Int      @map("item_id")
  quantity     Int
  pricePerUnit Int      @map("price_per_unit")
  totalPrice   Int      @map("total_price")
  commission   Int
  createdAt    DateTime @default(now()) @map("created_at")

  listing MarketplaceListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  seller  Character          @relation("SellerTransactions", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer   Character          @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
  item    Item               @relation(fields: [itemId], references: [id])

  @@map("marketplace_transactions")
  @@index([buyerId])
  @@index([sellerId])
  @@index([createdAt])
}

// =====================================================
// DUNGEONS
// =====================================================

enum DungeonDifficulty {
  easy
  normal
  hard
}

enum DungeonRunStatus {
  in_progress
  completed
  failed
}

model Dungeon {
  id                Int               @id @default(autoincrement())
  code              String            @unique
  name              String
  description       String
  recommendedLevel  Int               @map("recommended_level")
  maxFloors         Int               @map("max_floors")
  cooldownHours     Int               @default(24) @map("cooldown_hours")
  createdAt         DateTime          @default(now()) @map("created_at")
  
  floors            DungeonFloor[]
  runs              DungeonRun[]
  
  @@map("dungeons")
  @@index([recommendedLevel])
}

model DungeonFloor {
  id            Int       @id @default(autoincrement())
  dungeonId     Int       @map("dungeon_id")
  floorNumber   Int       @map("floor_number")
  isBoss        Boolean   @default(false) @map("is_boss")
  enemyId       Int       @map("enemy_id")
  enemyCount    Int       @default(1) @map("enemy_count")
  goldReward    Int       @default(0) @map("gold_reward")
  expReward     Int       @default(0) @map("exp_reward")
  itemDrops     Json      @default("[]") @map("item_drops")
  
  dungeon       Dungeon   @relation(fields: [dungeonId], references: [id], onDelete: Cascade)
  enemy         Enemy     @relation(fields: [enemyId], references: [id])
  
  @@map("dungeon_floors")
  @@unique([dungeonId, floorNumber])
  @@index([dungeonId])
  @@index([isBoss])
}

model DungeonRun {
  id                Int                 @id @default(autoincrement())
  characterId       Int                 @map("character_id")
  dungeonId         Int                 @map("dungeon_id")
  difficulty        DungeonDifficulty   @default(normal)
  currentFloor      Int                 @default(1) @map("current_floor")
  status            DungeonRunStatus    @default(in_progress)
  startedAt         DateTime            @default(now()) @map("started_at")
  completedAt       DateTime?           @map("completed_at")
  timeElapsed       Int                 @default(0) @map("time_elapsed")
  totalDamageDealt  Int                 @default(0) @map("total_damage_dealt")
  totalDamageTaken  Int                 @default(0) @map("total_damage_taken")
  goldEarned        Int                 @default(0) @map("gold_earned")
  expEarned         Int                 @default(0) @map("exp_earned")
  itemsObtained     Json                @default("[]") @map("items_obtained")
  
  character         Character           @relation(fields: [characterId], references: [id], onDelete: Cascade)
  dungeon           Dungeon             @relation(fields: [dungeonId], references: [id])
  
  @@map("dungeon_runs")
  @@index([characterId])
  @@index([dungeonId])
  @@index([status])
  @@index([completedAt])
}

// =====================================================
// FARM SESSIONS (Background Battle System)
// =====================================================

enum FarmSessionStatus {
  running
  completed
  cancelled
  error
}

model FarmSession {
  id                    Int                 @id @default(autoincrement())
  characterId           Int                 @map("character_id")
  enemyCode             String              @map("enemy_code")
  enemyName             String              @map("enemy_name")
  potionItemCode        String?             @map("potion_item_code")
  usePotionAtHpPercent  Int                 @default(50) @map("use_potion_at_hp_percent")
  maxBattles            Int                 @map("max_battles")
  
  // Status
  status                FarmSessionStatus   @default(running)
  
  // Progress
  currentBattle         Int                 @default(0) @map("current_battle")
  totalBattles          Int                 @default(0) @map("total_battles")
  victories             Int                 @default(0)
  defeats               Int                 @default(0)
  
  // Rewards Accumulated
  totalXpGained         Int                 @default(0) @map("total_xp_gained")
  totalGoldGained       Int                 @default(0) @map("total_gold_gained")
  totalItemsDropped     Json                @default("[]") @map("total_items_dropped")
  levelsGained          Int                 @default(0) @map("levels_gained")
  startLevel            Int                 @map("start_level")
  endLevel              Int                 @map("end_level")
  potionsUsed           Int                 @default(0) @map("potions_used")
  
  // Stop reason
  stoppedReason         String?             @map("stopped_reason")
  stoppedMessage        String?             @map("stopped_message")
  
  // HP tracking
  finalHp               Int?                @map("final_hp")
  finalMaxHp            Int?                @map("final_max_hp")
  
  // Timestamps
  startedAt             DateTime            @default(now()) @map("started_at")
  lastBattleAt          DateTime?           @map("last_battle_at")
  completedAt           DateTime?           @map("completed_at")
  
  character             Character           @relation(fields: [characterId], references: [id], onDelete: Cascade)
  
  @@map("farm_sessions")
  @@index([characterId])
  @@index([status])
  @@index([startedAt])
}
